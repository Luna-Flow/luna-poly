package Luna-Flow/luna-poly

alias @Luna-Flow/luna-generic as @luna-generic

// Values
fn coe[A : Eq + @luna-generic.Semiring + HomomorphismNat](Int) -> Polynomial[A]

fn derivative[A : HomomorphismNat + Eq + @luna-generic.Semiring](Polynomial[A]) -> Polynomial[A]

fn eval[A : @luna-generic.Semiring](Polynomial[A], A) -> A

fn fold[A, B](Polynomial[A], (B, A) -> B, init~ : B) -> B

fn is_zero[A : @luna-generic.Semiring + Eq](A) -> Bool

fn karatsuba[A : Eq + @luna-generic.Ring](Polynomial[A], Polynomial[A]) -> Polynomial[A]

fn leading[A](Polynomial[A]) -> (Int, A)?

fn monomial[A : Eq + @luna-generic.Semiring](Int, A) -> Polynomial[A]

fn op_get[V](SparsePolynomial[V], ExpVec) -> V?

fn op_set[V](SparsePolynomial[V], ExpVec, V) -> Unit

fn op_sub[A : Eq + @luna-generic.Ring](Polynomial[A], Polynomial[A]) -> Polynomial[A]

fn scale[A : Eq + @luna-generic.Semiring](Polynomial[A], Int, A) -> Polynomial[A]

fn substitute[A, B : @luna-generic.Semiring](Polynomial[A], (B, A) -> B, init~ : B) -> B

fn substitute_poly[A : Eq + @luna-generic.Semiring](Polynomial[A], Polynomial[A]) -> Polynomial[A]

fn to_poly[A : Eq + @luna-generic.Semiring](Array[A]) -> Polynomial[A]

fn var[A : Eq + @luna-generic.Semiring]() -> Polynomial[A]

// Types and methods
type ExpVec
impl ExpVec {
  length(Self) -> Int
  op_get(Self, Int) -> Int
  op_set(Self, Int, Int) -> Unit
}

type Polynomial[V]
impl Polynomial {
  derivative[A : HomomorphismNat + Eq + @luna-generic.Semiring](Self[A]) -> Self[A]
  empty[A : @luna-generic.Semiring](cap~ : Int) -> Self[A]
  eval[A : @luna-generic.Semiring](Self[A], A) -> A
  fold[A, B](Self[A], (B, A) -> B, init~ : B) -> B
  karatsuba[A : Eq + @luna-generic.Ring](Self[A], Self[A]) -> Self[A]
  leading[A](Self[A]) -> (Int, A)?
  length[A](Self[A]) -> Int
  op_sub[A : Eq + @luna-generic.Ring](Self[A], Self[A]) -> Self[A]
  scale[A : Eq + @luna-generic.Semiring](Self[A], Int, A) -> Self[A]
  substitute[A, B : @luna-generic.Semiring](Self[A], (B, A) -> B, init~ : B) -> B
  substitute_poly[A : Eq + @luna-generic.Semiring](Self[A], Self[A]) -> Self[A]
}
impl[V : Compare] Compare for Polynomial[V]
impl[V : Eq] Eq for Polynomial[V]

type SparsePolynomial[V]
impl SparsePolynomial {
  add[V : Eq + @luna-generic.AddMonoid](Self[V], Self[V]) -> Unit
  add_term[V : Eq + @luna-generic.AddMonoid](Self[V], ExpVec, V) -> Self[V]
  add_term_inplace[V : Eq + @luna-generic.AddMonoid](Self[V], ExpVec, V) -> Unit
  clear[V](Self[V]) -> Unit
  contains[V](Self[V], ExpVec) -> Bool
  copy[V : Eq + @luna-generic.AddMonoid](Self[V]) -> Self[V]
  each[V](Self[V], (ExpVec, V) -> Unit) -> Unit
  eachi[V](Self[V], (Int, ExpVec, V) -> Unit) -> Unit
  eval[V : Eq + @luna-generic.Semiring](Self[V], Array[V]) -> V
  eval_at[V : Show + Eq + @luna-generic.Semiring](Self[V], Int, V) -> Self[V]
  eval_at_many[V : Show + Eq + @luna-generic.Semiring](Self[V], Array[(Int, V)]) -> Self[V]
  from_array[V : Eq + @luna-generic.AddMonoid](Array[(ExpVec, V)]) -> Self[V]
  from_iter[V : Eq + @luna-generic.AddMonoid](Iter[(ExpVec, V)]) -> Self[V]
  get[V](Self[V], ExpVec) -> V?
  is_empty[V](Self[V]) -> Bool
  iter[V](Self[V]) -> Iter[(ExpVec, V)]
  iter2[V](Self[V]) -> Iter2[ExpVec, V]
  keys[V](Self[V]) -> Array[ExpVec]
  mul_term[V : Eq + @luna-generic.Semiring](Self[V], ExpVec, V) -> Self[V]
  mul_term_inplace[V : Eq + @luna-generic.Semiring](Self[V], ExpVec, V) -> Unit
  new[V]() -> Self[V]
  op_get[V](Self[V], ExpVec) -> V?
  op_set[V](Self[V], ExpVec, V) -> Unit
  range[V](Self[V], ExpVec, ExpVec) -> Iter2[ExpVec, V]
  remove[V](Self[V], ExpVec) -> Unit
  size[V](Self[V]) -> Int
  to_array[V](Self[V]) -> Array[(ExpVec, V)]
  values[V](Self[V]) -> Array[V]
}
impl[V : @luna-generic.Zero] @luna-generic.Zero for SparsePolynomial[V]
impl[V : Eq + @luna-generic.AddMonoid] Add for SparsePolynomial[V]
impl[V : Eq] Eq for SparsePolynomial[V]
impl[A : @luna-generic.Semiring + Eq] Mul for SparsePolynomial[A]
impl[V : Eq + Show + @luna-generic.Semiring] Show for SparsePolynomial[V]

// Type aliases

// Traits
trait HomomorphismNat

